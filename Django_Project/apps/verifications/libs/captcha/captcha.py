#!/usr/bin/env python
# -*- coding: utf-8 -*-

# refer to `https://bitbucket.org/akorn/wheezy.captcha`

import random
import string
import os.path
from io import BytesIO

from PIL import Image
from PIL import ImageFilter
from PIL.ImageDraw import Draw
from PIL.ImageFont import truetype


class Bezier:
    def __init__(self):
        self.tsequence = tuple([t / 20.0 for t in range(21)])
        self.beziers = {}

    def pascal_row(self, n):
        """ Returns n-th row of Pascal's triangle
        """
        result = [1]
        x, numerator = 1, n
        for denominator in range(1, n // 2 + 1):
            x *= numerator
            x /= denominator
            result.append(x)
            numerator -= 1
        if n & 1 == 0:
            result.extend(reversed(result[:-1]))
        else:
            result.extend(reversed(result))
        return result

    def make_bezier(self, n):
        """ Bezier curves:
            http://en.wikipedia.org/wiki/B%C3%A9zier_curve#Generalization
        """
        try:
            return self.beziers[n]
        except KeyError:
            combinations = self.pascal_row(n - 1)
            result = []
            for t in self.tsequence:
                tpowers = (t ** i for i in range(n))
                upowers = ((1 - t) ** i for i in range(n - 1, -1, -1))
                coefs = [c * a * b for c, a, b in zip(combinations,
                                                      tpowers, upowers)]
                result.append(coefs)
            self.beziers[n] = result
            return result


class Captcha(object):
    def __init__(self):
        self._bezier = Bezier()
        self._dir = os.path.dirname(__file__)
        # self._captcha_path = os.path.join(self._dir, '..', 'static', 'captcha')

    @staticmethod
    def instance():
        if not hasattr(Captcha, "_instance"):
            Captcha._instance = Captcha()
        return Captcha._instance

    def initialize(self, width=200, height=75, color=None, text=None, fonts=None):
        # self.image = Image.new('RGB', (width, height), (255, 255, 255))
        self._text = text if text else random.sample(string.ascii_uppercase + string.ascii_uppercase + '3456789', 4)
        self.fonts = fonts if fonts else \
            [os.path.join(self._dir, 'fonts', font) for font in ['Arial.ttf', 'Georgia.ttf', 'actionj.ttf']]
        self.width = width
        self.height = height
        self._color = color if color else self.random_color(0, 200, random.randint(220, 255))

    @staticmethod
    def random_color(start, end, opacity=None):
        red = random.randint(start, end)
        green = random.randint(start, end)
        blue = random.randint(start, end)
        if opacity is None:
            return red, green, blue
        return red, green, blue, opacity

    # draw image

    def background(self, image):
        Draw(image).rectangle([(0, 0), image.size], fill=self.random_color(238, 255))
        return image

    @staticmethod
    def smooth(image):
        return image.filter(ImageFilter.SMOOTH)

    def curve(self, image, width=4, number=6, color=None):
        dx, height = image.size
        dx /= number
        path = [(dx * i, random.randint(0, height))
                for i in range(1, number)]
        bcoefs = self._bezier.make_bezier(number - 1)
        points = []
        for coefs in bcoefs:
            points.append(tuple(sum([coef * p for coef, p in zip(coefs, ps)])
                                for ps in zip(*path)))
        Draw(image).line(points, fill=color if color else self._color, width=width)
        return image

    def noise(self, image, number=50, level=2, color=None):
        width, height = image.size
        dx = width / 10
        width -= dx
        dy = height / 10
        height -= dy
        draw = Draw(image)
        for i in range(number):
            x = int(random.uniform(dx, width))
            y = int(random.uniform(dy, height))
            draw.line(((x, y), (x + level, y)), fill=color if color else self._color, width=level)
        return image

    def text(self, image, fonts, font_sizes=None, drawings=None, squeeze_factor=0.75, color=None):
        color = color if color else self._color
        fonts = tuple([truetype(name, size)
                       for name in fonts
                       for size in font_sizes or (65, 70, 75)])
        draw = Draw(image)
        char_images = []
        for c in self._text:
            font = random.choice(fonts)
            c_width, c_height = draw.textsize(c, font=font)
            char_image = Image.new('RGB', (c_width, c_height), (0, 0, 0))
            char_draw = Draw(char_image)
            char_draw.text((0, 0), c, font=font, fill=color)
            char_image = char_image.crop(char_image.getbbox())
            for drawing in drawings:
                d = getattr(self, drawing)
                char_image = d(char_image)
            char_images.append(char_image)
        width, height = image.size
        offset = int((width - sum(int(i.size[0] * squeeze_factor)
                                  for i in char_images[:-1]) -
                      char_images[-1].size[0]) / 2)
        for char_image in char_images:
            c_width, c_height = char_image.size
            mask = char_image.convert('L').point(lambda i: i * 1.97)
            image.paste(char_image,
                        (offset, int((height - c_height) / 2)),
                        mask)
            offset += int(c_width * squeeze_factor)
        return image

    # draw text
    @staticmethod
    def warp(image, dx_factor=0.27, dy_factor=0.21):
        width, height = image.size
        dx = width * dx_factor
        dy = height * dy_factor
        x1 = int(random.uniform(-dx, dx))
        y1 = int(random.uniform(-dy, dy))
        x2 = int(random.uniform(-dx, dx))
        y2 = int(random.uniform(-dy, dy))
        image2 = Image.new('RGB',
                           (width + abs(x1) + abs(x2),
                            height + abs(y1) + abs(y2)))
        image2.paste(image, (abs(x1), abs(y1)))
        width2, height2 = image2.size
        return image2.transform(
            (width, height), Image.QUAD,
            (x1, y1,
             -x1, height2 - y2,
             width2 + x2, height2 + y2,
             width2 - x2, -y1))

    @staticmethod
    def offset(image, dx_factor=0.1, dy_factor=0.2):
        width, height = image.size
        dx = int(random.random() * width * dx_factor)
        dy = int(random.random() * height * dy_factor)
        image2 = Image.new('RGB', (width + dx, height + dy))
        image2.paste(image, (dx, dy))
        return image2

    @staticmethod
    def rotate(image, angle=25):
        return image.rotate(
            random.uniform(-angle, angle), Image.BILINEAR, expand=1)

    def captcha(self, path=None, fmt='JPEG'):
        """Create a captcha.

        Args:
            path: save path, default None.
            fmt: image format, PNG / JPEG.
        Returns:
            A tuple, (name, text, StringIO.value).
            For example:
                ('fXZJN4AFxHGoU5mIlcsdOypa', 'JGW9', '\x89PNG\r\n\x1a\n\x00\x00\x00\r...')

        """
        image = Image.new('RGB', (self.width, self.height), (255, 255, 255))
        image = self.background(image)
        image = self.text(image, self.fonts, drawings=['warp', 'rotate', 'offset'])
        image = self.curve(image)
        image = self.noise(image)
        image = self.smooth(image)
        name = "".join(random.sample(string.ascii_lowercase + string.ascii_uppercase + '3456789', 24))
        text = "".join(self._text)
        out = BytesIO()
        image.save(out, format=fmt)
        if path:
            image.save(os.path.join(path, name), fmt)
        return name, text, out.getvalue()

    def generate_captcha(self):
        self.initialize()
        return self.captcha("")


captcha = Captcha.instance()  # 单例对象


if __name__ == '__main__':
    print(captcha.generate_captcha())  # 返回一个3个元素的元组
    ('utDJGE7LhUoRsAFvBxw6iYZC',  # 验证码唯一标识
     'VE8W',  # 验证码字符串
     # 验证码图片
     b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xdb\x00C\x01\t\t\t\x0c\x0b\x0c\x18\r\r\x182!\x1c!22222222222222222222222222222222222222222222222222\xff\xc0\x00\x11\x08\x00K\x00\xc8\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf7z(\xa2\xa4\xd0(\xa2\xa9I\xaa\xdaE\xa9\xc7\xa7;\x91s"\xeeU\xdapG\xd6\x816\x96\xe5\xda(\xa2\x81\x85\x15GV/\xfd\x9e\xe2+\xd5\xb3\x90\xfd\xd9\x98d\n[\x0b\xc8$\xb6D\xfblW\x12\xa2\x80\xee\x08\xe4\xfa\xd0O6\xb6.\xd1G^\x94PPQH\xcc\xa82\xc4\x01\xeaM\x00\x822\x08#\xd4P!h\xa4$\x00I\xe8*\x1bk\xcbk\xd4g\xb6\x9d%U;IC\x90\x0f\xa5\x01~\x84\xf4QUu\x0b?\xb7\xd9\xbd\xbf\x9f,;\xbf\x8e#\x86\x1fC@=\xb4,;\xach]\xd8*\x8eI=\xa9U\xd5\xc6U\x81\x1e\xc6\xa0K4\x16\x0bi#4\xa8\x13ag<\xb7\xb9\xf7\xae7Q\x17\xde\x13\xb9\xf3m$\xdfi)\xe1\x1c\xe7\x14\x9b\xb1\x13\x9b\x82\xbbZ\x1d\xd5\x15\xcb\xe9\x1e0\x86\xf9\xc4w\x11\x18\x9b\xfb\xe3\x95\xae\x99\x1dd@\xe8\xc1\x94\xf4"\x9aw\x1c\'\x19\xab\xc4u\x15WP\xbc\xfb\x05\x9b\xdcy\x12\xcd\xb7\xf8"\x19c\xf4\x15Z=g\xcc\xbc\xb6\xb7\xfb\x15\xca\xf9\xe9\xbfyO\x95=\x98\xf64\\ni;3N\x8a(\xa0\xa0\xa2\x8a(\x01\t\n\t\'\x00w\xac\xb9\xfcE\xa6A&\xc3p\x1c\xe3? \xcdO\xab\xdb=\xde\x97<1\xb1\x0cW\x8cU\x0f\x0fGeq\xa7#-\xb4k*|\xaf\xf2\xf3\x91H\xceN\\\xd6D\xaf\xaa\xdbj\xba}\xd4V2\x97\x9fa\x01T\xedl\xfbSt\x95\x96\xc3\xc3\xe9%\xf4n\xb3\xc6\xa4\xb7\x9a\xc1\xdc~5\x85<\x11h\xbe2\x86N\x91M\xce\x07bk\xa2\xd7\x8b\xc9\xa7\x88"?<\xcc\x14c\xd2\x92"-\xb6\xe4\xf7Z\x14a}z\xe6\x11u\x1c\xf0,n7\x04a\xd0U\x8d\x03Y\x97Tk\x88\xe6E\r\x0bcr\xf45\x1f\x88\xd6\xe6\xdb\xc3\xdf\xe8\x97\x7feh\xc0\x04\x85\xce\xe1\xe9P\xf8.\xcf\xc8\xd2\x8d\xc3\x12^c\x92M>\xb6\x04\xda\xa8\xa2C\xe3\xeb\x87\x87E\x8d#\x8f{<\x83\x8c\xe3\x02\xb9\x8bM\x06i\xb4\xaf\xed\x05\xbc\x8a\x18\xbf\x88\xbbm\x00\xd7O\xe3\xb6\xff\x00\x89\\K\x9e\xaf\x9a\xb5\xe1\xab8\'\xf0\xd4P\\F\x92\xc6\xfc\xb20\xc85-^F3\xa7\xcfY\xa7\xd8\xe5c\xbc\xf1\x15\x98\x1eT\x92H\x98\xca\x91\xf3\x06\x1e\xa2\xaci\xbe/\xd5\xcd\xcciu\x03\x04.\x15\xb7\xa6\x0f\xe1[>&\xd3V\xdd\xac\xef\xacRx\xeeba\x1a\x98\x13~\x13\xd3oLWG\xf6hg\x8a?6%b\x00<\x8e\xf4$\xef\xb8\xe3J|\xcd)=\x08\xef\xed-\xf5\x0b\x07\x86\xe9KB\xc3,\x01\xc7\xbdq\xd2x\xde\x18\x15m\xb4\xa8wA\x0f\xc8\x0b\xe7<WJm/\xe0\xb7\xd4\x1ak\xdf=$RaM\x98\xf2\xc7\xa7\xbdq\xfe\x0f\xb2\xb7\xbb\xd5\xe5\xfbB\x07(\t\nG\x19\xa6\xef}\n\xab)sEGF\xcd\x9d?\xc6\xd0NDW\xb0\x98\xcbq\xb8t\xab>\x17\xd5\xed\xaf\xeeu\x0b[K\x04\xb6\x8a\xdeN\x19:I\x9e\xf5cY\xf0\xdd\x95\xf5\xa3yq,r\xa2\xfc\xac\xa3\x15\x85\xe0\xddE\xed\xefd\xd3e\x1cd\xed8\xe8E\x1a\xa7\xa8^q\x9cT\xd9\xddSC\xa1m\xa1\x86\xe1\xdb<\xd2\xab\xab\x8c\xab\x06\xfa\x1c\xd58\xf4\xabH\xb595\x14B.d]\xac\xdb\x8e\x08\xfaU\x1d\x0e\xfd\x0b\xb5\x89\xe2\xbbF\xbb\xd0.\x02\x00dA\xb9s\xed[u\x15\xccBkic=\x19H\xe2\x86\x12\x8f4Z8/\x00\xb6\xe9\xa7\x86\xe1#.W=+\xa8\x10\xea\x9ad7sF\xe2\xfbsf\x0b`\x02l\x1e\x99\xae/\xc3\xeel\xbcP\x91\xf6\xdeS\x9a\xf4\xea\x88\xecsa\xd5\xe9\xdb\xaa1\xac^\xf2\xc6\t\xaf5{\xc1\xe5\xc9\x86X\x88\x03\xc9\xf6\xcfz\xb3\xa6\xebv\x1a\xbb\xcc\xb6Sy\x86\x13\x878 \n\xe4<i\xac\xc7v\xc7N\x82U\x91\x17\xfdh^\xc7\xd0\xd6\x9f\x80\x9a5\xd1\xde\x04@\xa26\xeb\xdc\xe6\x9az\xd8\xa8\xd4\xfd\xe7\xb3\x8e\xc7YEEs7\xd9\xed\xde]\x8c\xfbFv\xafSU4\xfdf\xd3QS\xe5\xbe\xc7\x07\x05\x1f\x86\x15GE\xd5\xechQE\x14\x0c+\x06\xcaU\xb0\xd7\xeel\xd9\x02$\xff\x00<g\xd7\xd6\xb7\xab\x1b\xc4\x16\xe9\xe4\xc5{\xc8{w\r\x91\xd7\x1d\xe8dK\xbfb\x97\x8cl\x04\xd6\x0bx\xbcI\x01\x07>\xd4\xb67k\xa9\xdf\xe9\xfb\x18\xb2\xc5\x0e\xe6\xfa\xf4\xad\x8b\xa8c\xd54\xa7@r\x92\xa6A\xac\r\x0fK\xd44\xfd&\xe4\xdb$Kx\xcf\x843g\x18\x14\xba\x99\xc95;\xad\x9f\xe8G\xe3[\x92\xcdkd\x8cr\xed\x96Q]E\x8c+oe\x0cJ\xa0\x05@0+\x88\x81\xae5\x7f\x1a\xa4S\xa7\xcdl\xa0\xc8\xca>\\\x8fO\xc6\xbb\x86\xbd\xb5\x8e\xe9-Zx\xc4\xec2\xb1\x93\xf3\x11\xf4\xa4\xbb\x856\x9c\xa5?\x91\xc8\xf8\xfaF\xdbl\x9f\xc3\xc9\xac[\x13\xafi\xd6\xe95\xa0\x94\xc5 \xc8\xc0\xdc1Z\xde=\x90\x19-c\xee\x015\xb5\xe1]D^\xe9\xab\x08\xb5\x9a!\n\x81\xbaE\xc2\xbf\xd3\xd6\x95\xaf#\tEJ\xb3W\xb30-<owl\xa6;\xdb\x7f1\xc1\xeb\xd0\x8a\xe84\xff\x00\x16\xe9\xd7\xa1\x15\xe4\xf2\xa5n6\xb7\xf8\xd5\xfb\xad#O\xbaG\xf3\xad\xa3\xcb\x0e[o5\xcd\xa7\x84t\xab\xf7Yln\xc4\xb0+m\x91Cg>\xd9\x1d)\xfb\xc8\xd2\xd5\xa0\xec\x9d\xce\xa9/\xac\xe7\xb8{X\xee"y\x80\xcbF\xad\x92\x05qZ\x9d\x9d\xcf\x86\xb5V\xd4,\xf6\xf9.y\x04\xfa\xf6\xae\xa2\x1d\n\xcbM\xb4\x94i\xd1%\xbc\xc5\x08Y\xb1\xb9\x87\xd4\x9e\xb5\xc0\xa2\xdf\xeb\x9a\xbaY\xdc]\x99\xd81R\xf8\xc0\xc0\xef\x8aR\x15i;$\xd6\xbd,l\xcd\xe3\xc9\x1e\r\xb1\xda\x80\xe4`\xb15\x17\x84\xec\xd6\xebP{\xc9\xaeP1\xcf\xc9\x9eNk\xa4\xb7\xf0\xde\x91g\x00\x8eX\xd1\x89\x1c\xb4\x87\x93\\\xfe\xb9\xe1\xd8\xac\xa1{\xfd6|\x08\xf9eV\xce(\xb3\xdd\x93(\xd4MNz\xdb\xa1\xd8i\xdae\xae\x97\x0b\xc5h\x85Q\xd8\xb9\x05\x89\xe7\xf1\xab\x95\xcd\xf8GX\x93Q\xb3x\xa7m\xd2E\x81\x9e\xe4WIT\xb6\xd0\xea\xa6\xe2\xe2\x9cv\n)\x15\xd5\xc6U\x83}\x0eii\x94y\x86\xac\x9f`\xf1[1b@\x94?\x15\xd9j~#\x8fN)\x1b[N\xc1\xe3\xdc&U\xf9\x01\xf4\'\xd6\xb9\xaf\x1b\xc5\xe5j\xf0\xcc\x10\x00\xca9\xf5\xc5\\\x96\xe1\xf5\xfb\xab\x1b\x08\xf7\x08\x91\x03\xcaGJ\x85\xa3g\x1c[\x8c\xa7\x15\xbd\xca\xab\xa2\x17\xf0\xf5\xee\xa2\xc8\xa2{\x86\xf3\t\xc78\xab>\x02\xb8\x01\xae`\xc7\'\r\x9a\xe9\xf5X1\xa2\\C\x12\xf4\x8c\x80\x05q\xbe\x05\xe3U\x98\x1e\x0e\xca-f\x86\xe2\xa1V\x16=\n\xbc\xff\x00\xc4\xa2;\xbd~+k\x0c,\xff\x00u\x99x\xe6\xba\xfdoP\x8fO\xd3\xa4v}\xae\xc3\x08\x07Rk+\xc3:!\xb7S\xa8]|\xd7\x12\xfc\xc3=\x81\xaaz\xe8kUs\xda\x08\xb1\xa2\xd9k\x16 Gu:M\x11<\xe4\xe4\x8a+z\x8af\xb1\x8f*\xb2\n\x8exR\xe2\x07\x89\xc6U\x86\x08\xa9(\xa0f6\x8b"\xd9\xd9\xcfo<\xcb\x8bf9bz/\xbd_\xfbl\x12X=\xd42\xa4\x91\x05$:\x9c\x83Xz\xd2\xbe\x9d\xa8\xfd\xad \xf3\xa0\xb9_.X\xcfBj\'\xb0\xb8:o\x93,\xd1\xdaF\xca|\xbbxF:\xf6\xa4d\xa4\xd6\x8b\xa1\x1f\x83P\xcfs}z\xdd]\xf0\ru\rel\xf7kt\xd0Fn\x10ad#\xe6\x03\xebY\xde\x1a\xd3\x9fM\xd2\x969\x06$bX\xd5\xbb\xcdV\xd2\xc2\xe2\xde\x0b\x87+%\xc3m\x8c\x05\'&\x85\xa2\xd4 \x94`\xb9\x8eG\xc76\x97\x0fw\x1c\xeb\x1b\xb4J\x98,\x07\x02\xa7\xd0\xfc]k\x05\xa46\x97Q\xb4e\x06\xd0\xc3\xa6+\xb1\x94Fc"]\xbb;\xee\xe9^}\xe2\xcb\xef\x0cZ\x89\x12?\xde_\x1e\x8b\x078>\xfd\xaa^\x9a\x98\xd5N\x94\x9dE/\xbc\xee\xed\xefmoa\xdf\x0c\xa8\xe8}\rd^k\xbe\x1f\xf0\xd4\x12(\x92\x08\x8era\x87\x19\'\xe8+\xcc-l<Iy\x0b]Y\xa4\xb0@;\xab`\xe3\xf9\xd4\xda-\xa6\x9fcy\xbfU\xb5k\xa6\xc89rF\xd3\xf4\xefK\x9d\xf62x\xb9\xca\xd6\x8d\xbc\xd9\xd0?\x8a<I\xe2i\xccZ\x15\x99\xb7\xb6\xce\x0c\xce:\x8fs\xfd+\x98\x8e\xcbT\x87X\xf2n5\x03l\xc1\xca\xbc\xb1\xf5\x15\xeb\xfaE\xf5\x85\xed\xaf\xfa\x00U\x8d8\xda\xab\x8cW7\xe2/\t\xcd=\xc3\xdeY\x9d\xec\xe7,\x86\x87\x16\xd5\xc2\xa6\x1eR\x8a\x9f73\xfe\xb63\xe5\xf8\x7fy\xa8"4\xbe$\x96`\x06T\x9c\x9c~\xb5\x93\xab\xf8V\xe3\xc3\xf6n`\xd7]\xe4r\x01\x87\xfb\xdfZ\xbd\x06\x93\xe2\x14s\x14K2m\x18\xe1\xb0+Z\xc3\xc1\xb7\x17\x0c\xb3j\x936{\xa6r\x7f:\\\xb7\xd9\x13\xecc?\x86\r>\xf7g/\xe1\xb4\xf1U\xa1{\xab\x0b$\x9dzns\x81[\xbaW\xc4\x98^V\xb3\xd6\xed\xcd\xb4\xc0\x94gQ\xc0>\xe3\xa8\xae\xf2\xd6\xd6\x1b;u\x82\x04\n\x8b\xd0\n\xcd\xbd\xf0\xe6\x89\xa8\tc\x9a\xca\x02\xf2r\xcc\xa3\r\x9f\\\xf5\xaa\xe5kfl\xb0\xf5)\xa5\xec\xe5\xf7\xecK\xa2\xc1\xa6[\xda\x11\xa5\xc8\xad\x0c\x8c_\x897d\xd4\x96:o\xd8\xaenf\xfbT\xf3y\xcd\xbbl\x8d\x90\x9e\xcb\xe9\\U\xe7\x80/\xb4\xa7\x17^\x1d\xd4%I\x17\xfeY;u\xfe\x9f\x85X\xd2<z\xd6\xf7K\xa5\xf8\x82\x06\xb6\xbbS\xb4\xca~\xe9>\xa7\xd2\x8b\xdbr\xa3UE\xa8\xd5\x8f/n\xc5\x8f\x1e\xc2Lv\xd3\x0fR1Z>\x10\xd3>\xc7\xa6\xfd\xa2A\xfb\xd9\xb9\xfc+N\xf2\xc6\xcfZ\xb5\x88\xbb\t"\x04:\xb2\x1c\x83W\x91\x164TP\x02\xa8\xc0\x02\xaa\xda\xdc\xd5R^\xd1\xd4\x1b8\xcd\xbc\x80\x7ft\xd7\x99\xf8ni\xe0\xf1`\xc6\xc1\t\xdc\x1f=Ezl\xbf\xea_\xfd\xd3^C\x13\xbc\x9a\xbc\x91[\xb6ei\nq\xd4d\xd4\xcb\xa1\x96%\xdaP~gQswk\xafx\xb6\x1b6\x95\xbc\xa8\xfa.\t\x0cEw\n\xa1\x14(\x18\x00`Vv\x8f\xa4\xc3\xa6Y\xa4j\xaad\xc6Y\xf1\xc95\xa5T\x91\xbd8\xb5w-\xd8QE\x14\xcd\x02\x8a(\xa0\x08n\xad\xa2\xbb\x81\xa1\x95r\xadQA\xa7A\x01V\xc1vQ\x80\\\xe6\xad\xd1@\xac\x8en\xf7\xc7Z\r\x8c\xb3C%\xd13DJ\x98\xc2\x9c\x92;V\x1d\xef\xc4xf\x88.\x9f\xa5\xdcMr\xc7\x08$\x8f\x80k\xae>\x1e\xd2\x0c\x8d#i\xd6\xec\xec\xc5\x99\x99rI?Z\xbc\xb6\xf0\xae6\xc4\x83\x1d0\xa2\xa6\xd2\xees\xb8V\x97\xdaK\xe4y\xc9\xd1\xfc[\xe2\xb9\x01\xd4\xe7\xfb\x05\x99\x00\xf9k\xc6G\xd3\xfck\xa5\xd1\xfc\x0f\xa3\xe9\x0f\xe6\x88\x8d\xc4\xf9\xcf\x997\xccG\xd2\xbaZ(QC\x86\x1a\x11|\xcfW\xdd\x94l\xb4\x9b=>{\x89\xad\xe3*\xf3\x9d\xd2e\x89\x04\xfd;TZ\x86\x83a\xa8\xaby\xb0(s\xfcj0kN\x8a\xab\x1brF\xd6\xb6\x86\x16\x87\xa0\xc9\xa2\xdc\xcc\x12Q$\x12\x0e\xfdA\xab\xd7\xdf\xda\x7fi\xb7\xfb\x0f\x91\xe4\xee\xfd\xff\x00\x99\x9c\xe3\xfd\x9a\xbfE\x16\x12\x82Q\xe5AT"\xb5\xbdMV[\x87\xbd\xdfh\xcb\x84\xb7\xd9\xf7O\xaej\xfd\x14\x14\xd5\xc2\xa9G\xa5ZE\xa9\xc9\xa8\xa2\x11s"\xedf\xdcpG\xd2\xae\xd1@4\x9e\xe1X\xda\xf7\x864\xef\x10@R\xea \xb2\xff\x00\x0c\xa80\xc3\xf1\xad\x9a(j\xe2\x94T\x95\xa4\xb4<\xca\x1d\x1f\xc6\x1e\x14f:|\xab{h\xb9""s\x81\xf4\xff\x00\n\xd4\xd2\xbe#\xda96\xfa\xc4/er\xbc6T\xe0\x9f\xe9]\xcdgj\x1a\x0e\x95\xaa\x03\xf6\xdb\x18\xa5$`\xb1\x18?\x98\xe6\xa3\x95\xad\x99\xcd\xec\'O\xf8R\xf9=Qj\xde\xee\xde\xfa\xdf\xcc\xb6\x99%\x8d\x87\x0c\x87"\xb0to\n\xa6\x9d\xaa\xdc^J\xb1\xb9s\x94 t\xaf\x17\xd3\xb5\xadKI\x93\xcc\xb1\xbb\x92\x13\xe8\xb8 \xfe\x07\x8a\xfa6\x88\xc9HXz\xf1\xc4j\xd6\xa8(\xa2\x8a\xb3\xb0(\xa2\x8a\x00\xff\xd9')

